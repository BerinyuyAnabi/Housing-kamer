import {normalizeToArray} from "./util/parse/normalizeToArray";

var applyBreakpoints, closestAbove, defaultBreakpoints, findContainerWidth, maxWidth, updateDpr;

import Configuration from './configuration';
import HtmlTag from './tags/htmltag';
import ImageTag from './tags/imagetag';
import PictureTag from './tags/picturetag';
import SourceTag from './tags/sourcetag';
import Transformation from './transformation';
import url from './url';
import VideoTag from './tags/videotag';
import * as constants from './constants';

import {
  addClass,
  assign,
  defaults,
  getData,
  isEmpty,
  isFunction,
  isString,
  merge,
  removeAttribute,
  setAttribute,
  setData,
  width
} from './util';
//

import mountCloudinaryVideoTag from "./util/features/transparentVideo/mountCloudinaryVideoTag";
import enforceOptionsForTransparentVideo from "./util/features/transparentVideo/enforceOptionsForTransparentVideo";
import mountSeeThruCanvasTag from "./util/features/transparentVideo/mountSeeThruCanvasTag";
import checkSupportForTransparency from "./util/features/transparentVideo/checkSupportForTransparency";

defaultBreakpoints = function(width, steps = 100) {
  return steps * Math.ceil(width / steps);
};

closestAbove = function(list, value) {
  var i;
  i = list.length - 2;
  while (i >= 0 && list[i] >= value) {
    i--;
  }
  return list[i + 1];
};

applyBreakpoints = function(tag, width, steps, options) {
  var ref, ref1, ref2, responsive_use_breakpoints;
  responsive_use_breakpoints = (ref = (ref1 = (ref2 = options['responsive_use_breakpoints']) != null ? ref2 : options['responsive_use_stoppoints']) != null ? ref1 : this.config('responsive_use_breakpoints')) != null ? ref : this.config('responsive_use_stoppoints');
  if ((!responsive_use_breakpoints) || (responsive_use_breakpoints === 'resize' && !options.resizing)) {
    return width;
  } else {
    return this.calc_breakpoint(tag, width, steps);
  }
};

findContainerWidth = function(element) {
  var containerWidth, style;
  containerWidth = 0;
  while (((element = element != null ? element.parentNode : void 0) instanceof Element) && !containerWidth) {
    style = window.getComputedStyle(element);
    if (!/^inline/.test(style.display)) {
      containerWidth = width(element);
    }
  }
  return containerWidth;
};

updateDpr = function(dataSrc, roundDpr) {
  return dataSrc.replace(/\bdpr_(1\.0|auto)\b/g, 'dpr_' + this.device_pixel_ratio(roundDpr));
};

maxWidth = function(requiredWidth, tag) {
  var imageWidth;
  imageWidth = getData(tag, 'width') || 0;
  if (requiredWidth > imageWidth) {
    imageWidth = requiredWidth;
    setData(tag, 'width', requiredWidth);
  }
  return imageWidth;
};

class Cloudinary {
  /**
   * Creates a new Cloudinary instance.
   * @class Cloudinary
   * @classdesc Main class for accessing Cloudinary functionality.
   * @param {Object} options - A {@link Configuration} object for globally configuring Cloudinary account settings.
   * @example<br/>
   *  var cl = new cloudinary.Cloudinary( { cloud_name: "mycloud"});<br/>
   *  var imgTag = cl.image("myPicID");
   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters" target="_blank">
   *  Available configuration options</a>
   */
  constructor(options) {
    var configuration;
    this.devicePixelRatioCache = {};
    this.responsiveConfig = {};
    this.responsiveResizeInitialized = false;
    configuration = new Configuration(options);
    // Provided for backward compatibility
    this.config = function(newConfig, newValue) {
      return configuration.config(newConfig, newValue);
    };
    /**
     * Use \<meta\> tags in the document to configure this `cloudinary` instance.
     * @return This {Cloudinary} instance for chaining.
     */
    this.fromDocument = function() {
      configuration.fromDocument();
      return this;
    };
    /**
     * Use environment variables to configure this `cloudinary` instance.
     * @return This {Cloudinary} instance for chaining.
     */
    this.fromEnvironment = function() {
      configuration.fromEnvironment();
      return this;
    };
    /**
     * Initializes the configuration of this `cloudinary` instance.
     *  This is a convenience method that invokes both {@link Configuration#fromEnvironment|fromEnvironment()}
     *  (Node.js environment only) and {@link Configuration#fromDocument|fromDocument()}.
     *  It first tries to retrieve the configuration from the environment variable.
     *  If not available, it tries from the document meta tags.
     * @function Cloudinary#init
     * @see Configuration#init
     * @return This {Cloudinary} instance for chaining.
     */
    this.init = function() {
      configuration.init();
      return this;
    };
  }

  /**
   * Convenience constructor
   * @param {Object} options
   * @return {Cloudinary}
   * @example cl = cloudinary.Cloudinary.new( { cloud_name: "mycloud"})
   */
  static new(options) {
    return new this(options);
  }

  /**
   * Generates a URL for any asset in your Media library.
   * @function Cloudinary#url
   * @param {string} publicId - The public ID of the media asset.
   * @param {Object} [options] - The {@link Transformation} parameters to include in the URL.
   * @param {type} [options.type='upload'] - The asset's storage type.
   *  For details on all fetch types, see
   * <a href="https://cloudinary.com/documentation/image_transformations#fetching_images_from_remote_locations"
   *  target="_blank">Fetch types</a>.
   * @param {resourceType} [options.resource_type='image'] - The type of asset. Possible values:<br/>
   *  - `image`<br/>
   *  - `video`<br/>
   *  - `raw`
   * @return {string} The media asset URL.
   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
   *  Available image transformations</a>
   * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
   *  Available video transformations</a>
   */
  url(publicId, options = {}) {
    return url(publicId, options, this.config());
  }

  /**
   * Generates a video asset URL.
   * @function Cloudinary#video_url
   * @param {string} publicId - The public ID of the video.
   * @param {Object} [options] - The {@link Transformation} parameters to include in the URL.
   * @param {type} [options.type='upload'] - The asset's storage type.
   *  For details on all fetch types, see
   *  <a href="https://cloudinary.com/documentation/image_transformations#fetching_images_from_remote_locations"
   *  target="_blank">Fetch types</a>.
   * @return {string} The video URL.
   * @see <a href="https://cloudinary.com/documentation/video_transformation_reference"
   *  target="_blank">Available video transformations</a>
   */
  video_url(publicId, options) {
    options = assign({
      resource_type: 'video'
    }, options);
    return this.url(publicId, options);
  }

  /**
   * Generates a URL for an image intended to be used as a thumbnail for the specified video.
   *  Identical to {@link Cloudinary#url|url}, except that the `resource_type` is `video`
   *  and the default `format` is `jpg`.
   * @function Cloudinary#video_thumbnail_url
   * @param {string} publicId -  The unique identifier of the video from which you want to generate a thumbnail 